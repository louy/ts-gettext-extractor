on:
  pull_request:
  push:
    branches:
      - main

name: CI

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: short
  RUSTUP_MAX_RETRIES: 10

jobs:
  build:
    permissions: 
      contents: read
    runs-on: ${{ matrix.build.os }}
    strategy:
      fail-fast: false
      matrix:
        build:
          - {
              NAME: linux-x64-gnu,
              OS: ubuntu-22.04,
              TARGET: x86_64-unknown-linux-gnu,
            }
          - {
              NAME: linux-arm64-gnu,
              OS: ubuntu-22.04,
              TARGET: aarch64-unknown-linux-gnu,
            }
          - {
              NAME: linux-x64-musl,
              OS: ubuntu-22.04,
              TARGET: x86_64-unknown-linux-musl,
            }
          - {
              NAME: linux-arm64-musl,
              OS: ubuntu-22.04,
              TARGET: aarch64-unknown-linux-musl,
            }
          # - {
          #     NAME: win32-x64-msvc,
          #     OS: windows-2022,
          #     TARGET: x86_64-pc-windows-msvc,
          #   }
          # - {
          #     NAME: win32-arm64-msvc,
          #     OS: windows-2022,
          #     TARGET: aarch64-pc-windows-msvc,
          #   }
          - {
              NAME: darwin-x64,
              OS: macos-15,
              TARGET: x86_64-apple-darwin,
            }
          - {
              NAME: darwin-arm64,
              OS: macos-15,
              TARGET: aarch64-apple-darwin,
            }
    env:
      NAME: ${{ matrix.build.NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install dependencies
        shell: bash
        run: |
          if [[ "${{ matrix.build.NAME }}" = *"-musl" ]]; then
            sudo apt-get update
            sudo apt-get install -y --no-install-recommends \
              --allow-unauthenticated musl-tools
          fi
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: ${{ matrix.build.TARGET }}-build
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.build.TARGET }}
          override: true
      - name: Build (linux/macos)
        if: matrix.build.OS != 'windows-2022'
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --locked --target ${{ matrix.build.TARGET }}
      - name: Build (windows)
        if: matrix.build.OS == 'windows-2022'
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --locked --target ${{ matrix.build.TARGET }} # --no-default-features

  checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
      - run: cargo clippy --all-targets --all-features
      - run: cargo test
