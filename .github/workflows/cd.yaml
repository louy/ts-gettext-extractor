name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: short
  RUSTUP_MAX_RETRIES: 10

jobs:
  publish-binary:
    name: Publish binary
    permissions: 
      contents: write
      id-token: write
    runs-on: ${{ matrix.build.os }}
    strategy:
      fail-fast: false
      matrix:
        build:
          - {
              NAME: linux-x64-gnu,
              OS: ubuntu-22.04,
              TARGET: x86_64-unknown-linux-gnu,
            }
          - {
              NAME: linux-arm64-gnu,
              OS: ubuntu-22.04,
              TARGET: aarch64-unknown-linux-gnu,
            }
          - {
              NAME: linux-x64-musl,
              OS: ubuntu-22.04,
              TARGET: x86_64-unknown-linux-musl,
            }
          - {
              NAME: linux-arm64-musl,
              OS: ubuntu-22.04,
              TARGET: aarch64-unknown-linux-musl,
            }
          # - {
          #     NAME: win32-x64-msvc,
          #     OS: windows-2022,
          #     TARGET: x86_64-pc-windows-msvc,
          #   }
          # - {
          #     NAME: win32-arm64-msvc,
          #     OS: windows-2022,
          #     TARGET: aarch64-pc-windows-msvc,
          #   }
          - {
              NAME: darwin-x64,
              OS: macos-15,
              TARGET: x86_64-apple-darwin,
            }
          - {
              NAME: darwin-arm64,
              OS: macos-15,
              TARGET: aarch64-apple-darwin,
            }
    env:
      NAME: ${{ matrix.build.NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set the release version
        shell: bash
        run: echo "RELEASE_VERSION=${GITHUB_REF:11}" >> $GITHUB_ENV
      - name: Install dependencies
        shell: bash
        run: |
          if [[ "${{ matrix.build.NAME }}" = *"-musl" ]]; then
            sudo apt-get update
            sudo apt-get install -y --no-install-recommends \
              --allow-unauthenticated musl-tools
          fi
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: ${{ matrix.build.TARGET }}-build
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.build.TARGET }}
          override: true
      - name: Build (linux/macos)
        if: matrix.build.OS != 'windows-2022'
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --locked --target ${{ matrix.build.TARGET }}
      - name: Build (windows)
        if: matrix.build.OS == 'windows-2022'
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --locked --target ${{ matrix.build.TARGET }} # --no-default-features
      - name: Prepare release assets
        shell: bash
        run: |
          mkdir -p packages/ts-gettext-extractor-${{ env.NAME }}/bin/
          bin=ts-gettext-extractor
          if [ "${{ matrix.build.OS }}" = "windows-2022" ]; then
            bin="${bin}.exe"
          fi
          cp "target/${{ matrix.build.TARGET }}/release/${bin}" packages/ts-gettext-extractor-${{ env.NAME }}/bin/
      - name: Create release artifacts
        shell: bash
        run: |
          cd packages
          if [ "${{ matrix.build.OS }}" = "windows-2022" ]; then
            7z a -tzip "../ts-gettext-extractor-${{ env.NAME }}-${{ env.RELEASE_VERSION }}.zip" \
            ts-gettext-extractor-${{ env.NAME }}/
          else
            tar -czvf ../ts-gettext-extractor-${{ env.NAME }}-${{ env.RELEASE_VERSION }}.tar.gz \
              ts-gettext-extractor-${{ env.NAME }}/
            shasum -a 512 ../ts-gettext-extractor-${{ env.NAME }}-${{ env.RELEASE_VERSION }}.tar.gz \
              > ../ts-gettext-extractor-${{ env.NAME }}-${{ env.RELEASE_VERSION }}.tar.gz.sha512
          fi
      - name: Publish to GitHub
        if: ${{ !contains(github.ref, '-') }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ts-gettext-extractor-${{ env.NAME }}-${{ env.RELEASE_VERSION }}*
          file_glob: true
          overwrite: true
          tag: ${{ github.ref }}
          release_name: "Release v${{ env.RELEASE_VERSION }}"
      - name: Publish to GitHub (pre-release)
        if: ${{ contains(github.ref, '-') }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ts-gettext-extractor-${{ env.NAME }}-${{ env.RELEASE_VERSION }}*
          file_glob: true
          overwrite: true
          tag: ${{ github.ref }}
          release_name: "Pre-release v${{ env.RELEASE_VERSION }}"
          prerelease: true
      - run: corepack enable
      - name: Install node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: "https://registry.npmjs.org"
      - name: Publish to NPM
        run: |
          cd packages/ts-gettext-extractor-${{ env.NAME }}/
          if [ ${{ contains(github.ref, '-') }} = "true" ]; then
            npm publish --provenance --access public --tag rc
          else
            npm publish --provenance --access public
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-main-package:
    needs: publish-binary
    permissions: 
      contents: write
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - run: corepack enable
      - name: Install node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: "https://registry.npmjs.org"
      - run: |
          cp README.md packages/ts-gettext-extractor/
      - name: Publish to NPM
        run: |
          cd packages/ts-gettext-extractor
          if [ ${{ contains(github.ref, '-') }} = "true" ]; then
            npm publish --provenance --access public --tag rc
          else
            npm publish --provenance --access public
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  
  publish-crate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
      - run: cargo publish --token ${{secrets.CARGO_TOKEN}}
